import React, { useState, useContext } from "react";
import { Link, useNavigate } from "react-router-dom";
import logo from "../images/logo.png";
import { ThemeContext } from "../context/ThemeContext";

export default function Navbar() {
  const { darkMode, toggleTheme } = useContext(ThemeContext);
  const navigate = useNavigate();
  const [showLanguageDropdown, setShowLanguageDropdown] = useState(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [currentLanguage, setCurrentLanguage] = useState("English");

  const languages = [
    { code: "en", name: "English", flag: "üá¨üáß" },
    { code: "zh", name: "‰∏≠Êñá (Chinese)", flag: "üá®üá≥" },
    { code: "es", name: "Espa√±ol (Spanish)", flag: "üá™üá∏" },
    { code: "fr", name: "Fran√ßais (French)", flag: "üá´üá∑" },
    { code: "de", name: "Deutsch (German)", flag: "üá©üá™" },
    { code: "it", name: "Italiano (Italian)", flag: "üáÆüáπ" },
    { code: "pt", name: "Portugu√™s (Portuguese)", flag: "üáµüáπ" },
    { code: "ru", name: "–†—É—Å—Å–∫–∏–π (Russian)", flag: "üá∑üá∫" },
    { code: "ja", name: "Êó•Êú¨Ë™û (Japanese)", flag: "üáØüáµ" },
    { code: "ko", name: "ÌïúÍµ≠Ïñ¥ (Korean)", flag: "üá∞üá∑" },
    { code: "ar", name: "ÿßŸÑÿπÿ±ÿ®Ÿäÿ© (Arabic)", flag: "üá∏üá¶" },
    { code: "hi", name: "‡§π‡§ø‡§®‡•ç‡§¶‡•Ä (Hindi)", flag: "üáÆüá≥" },
    { code: "bn", name: "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ (Bengali)", flag: "üáßüá©" },
    { code: "pa", name: "‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä (Punjabi)", flag: "üáÆüá≥" },
    { code: "tr", name: "T√ºrk√ße (Turkish)", flag: "üáπüá∑" },
    { code: "nl", name: "Nederlands (Dutch)", flag: "üá≥üá±" },
    { code: "sv", name: "Svenska (Swedish)", flag: "üá∏üá™" },
    { code: "fi", name: "Suomi (Finnish)", flag: "üá´üáÆ" },
    { code: "pl", name: "Polski (Polish)", flag: "üáµüá±" },
    { code: "uk", name: "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (Ukrainian)", flag: "üá∫üá¶" }
  ];

  const translations = {
    en: {
      help: "Help",
      history: "History",
      guide: "Invoicing Guide",
      signIn: "Sign In",
      signUp: "Sign Up",
      brand: "Invoice-Generator.com"
    },
    zh: { help: "Â∏ÆÂä©", history: "ÂéÜÂè≤", guide: "ÂèëÁ•®ÊåáÂçó", signIn: "ÁôªÂΩï", signUp: "Ê≥®ÂÜå", brand: "ÂèëÁ•®ÁîüÊàêÂô®.com" },
    es: { help: "Ayuda", history: "Historial", guide: "Gu√≠a de Facturaci√≥n", signIn: "Iniciar sesi√≥n", signUp: "Registrarse", brand: "Generador-de-Facturas.com" },
    fr: { help: "Aide", history: "Historique", guide: "Guide de facturation", signIn: "Connexion", signUp: "S'inscrire", brand: "G√©n√©rateur-de-Factures.com" },
    de: { help: "Hilfe", history: "Verlauf", guide: "Rechnungsf√ºhrer", signIn: "Anmelden", signUp: "Registrieren", brand: "Rechnungs-Generator.com" },
    it: { help: "Aiuto", history: "Cronologia", guide: "Guida alla fatturazione", signIn: "Accedi", signUp: "Registrati", brand: "Generatore-di-Fatture.com" },
    pt: { help: "Ajuda", history: "Hist√≥rico", guide: "Guia de Faturamento", signIn: "Entrar", signUp: "Registrar", brand: "Gerador-de-Faturas.com" },
    ru: { help: "–ü–æ–º–æ—â—å", history: "–ò—Å—Ç–æ—Ä–∏—è", guide: "–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Å—á–µ—Ç–æ–≤", signIn: "–í–æ–π—Ç–∏", signUp: "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", brand: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä-–°—á–µ—Ç–æ–≤.com" },
    ja: { help: "„Éò„É´„Éó", history: "Â±•Ê≠¥", guide: "Ë´ãÊ±ÇÊõ∏„Ç¨„Ç§„Éâ", signIn: "„É≠„Ç∞„Ç§„É≥", signUp: "ÁôªÈå≤", brand: "Ë´ãÊ±ÇÊõ∏„Ç∏„Çß„Éç„É¨„Éº„Çø„Éº.com" },
    ko: { help: "ÎèÑÏõÄÎßê", history: "Í∏∞Î°ù", guide: "ÏÜ°Ïû• Í∞ÄÏù¥Îìú", signIn: "Î°úÍ∑∏Ïù∏", signUp: "Í∞ÄÏûÖÌïòÍ∏∞", brand: "ÏÜ°Ïû•-ÏÉùÏÑ±Í∏∞.com" },
    ar: { help: "ŸÖÿ≥ÿßÿπÿØÿ©", history: "ÿßŸÑÿ≥ÿ¨ŸÑ", guide: "ÿØŸÑŸäŸÑ ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±", signIn: "ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿØÿÆŸàŸÑ", signUp: "ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ", brand: "ŸÖŸÜÿ¥ÿ¶-ÿßŸÑŸÅŸàÿßÿ™Ÿäÿ±.com" },
    hi: { help: "‡§∏‡§π‡§æ‡§Ø‡§§‡§æ", history: "‡§á‡§§‡§ø‡§π‡§æ‡§∏", guide: "‡§ö‡§æ‡§≤‡§æ‡§® ‡§ó‡§æ‡§á‡§°", signIn: "‡§∏‡§æ‡§á‡§® ‡§á‡§®", signUp: "‡§∏‡§æ‡§á‡§® ‡§Ö‡§™", brand: "‡§ö‡§æ‡§≤‡§æ‡§®-‡§ú‡§®‡§∞‡•á‡§ü‡§∞.com" },
    bn: { help: "‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø", history: "‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏", guide: "‡¶ö‡¶æ‡¶≤‡¶æ‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ", signIn: "‡¶∏‡¶æ‡¶á‡¶® ‡¶á‡¶®", signUp: "‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", brand: "‡¶ö‡¶æ‡¶≤‡¶æ‡¶®-‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü‡¶∞.com" },
    pa: { help: "‡®Æ‡®¶‡®¶", history: "‡®á‡®§‡®ø‡®π‡®æ‡®∏", guide: "‡®á‡®®‡®µ‡©å‡®á‡®∏ ‡®ó‡®æ‡®à‡®°", signIn: "‡®∏‡®æ‡®à‡®® ‡®á‡®®", signUp: "‡®∏‡®æ‡®à‡®® ‡®Ö‡©±‡®™", brand: "‡®á‡®®‡®µ‡©å‡®á‡®∏-‡®ú‡®®‡®∞‡©á‡®ü‡®∞.com" },
    tr: { help: "Yardƒ±m", history: "Ge√ßmi≈ü", guide: "Fatura Rehberi", signIn: "Giri≈ü Yap", signUp: "Kaydol", brand: "Fatura-Olu≈üturucu.com" },
    nl: { help: "Help", history: "Geschiedenis", guide: "Facturatiegids", signIn: "Inloggen", signUp: "Registreren", brand: "Factuur-Generator.com" },
    sv: { help: "Hj√§lp", history: "Historik", guide: "Faktureringsguide", signIn: "Logga in", signUp: "Registrera", brand: "Faktura-Generator.com" },
    fi: { help: "Ohje", history: "Historia", guide: "Laskutusopas", signIn: "Kirjaudu sis√§√§n", signUp: "Rekister√∂idy", brand: "Laskunluontiohjelma.com" },
    pl: { help: "Pomoc", history: "Historia", guide: "Przewodnik po fakturowaniu", signIn: "Zaloguj siƒô", signUp: "Zarejestruj siƒô", brand: "Generator-Faktur.com" },
    uk: { help: "–î–æ–ø–æ–º–æ–≥–∞", history: "–Ü—Å—Ç–æ—Ä—ñ—è", guide: "–ü–æ—Å—ñ–±–Ω–∏–∫ –∑ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—ñ–≤", signIn: "–£–≤—ñ–π—Ç–∏", signUp: "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", brand: "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä-–†–∞—Ö—É–Ω–∫—ñ–≤.com" }
  };

  const handleLanguageChange = (language) => {
    setCurrentLanguage(language.name);
    setShowLanguageDropdown(false);
  };

  const getTranslation = (key) => {
    const langCode = languages.find((lang) => lang.name === currentLanguage)?.code || "en";
    return translations[langCode]?.[key] || translations.en[key];
  };

  return (
    <nav className={`border-b shadow-sm transition-colors duration-300 ${darkMode ? "bg-gray-800 border-gray-700" : "bg-white border-gray-200"}`}>
      <div className="max-w-7xl mx-auto px-4 py-2 flex items-center justify-between">
        <div className="flex items-center space-x-2 cursor-pointer" onClick={() => navigate("/")}>
          <img src={logo} alt="Logo" className="h-8" />
          <span className={`text-xl font-semibold ${darkMode ? "text-white" : "text-gray-800"}`}>
            {getTranslation("brand")}
          </span>
        </div>

        {/* Desktop Nav */}
        <div className="hidden md:flex space-x-6 text-sm">
          <Link to="/help" className={`hover:underline ${darkMode ? "text-gray-300 hover:text-white" : "text-gray-600 hover:text-black"}`}>
            {getTranslation("help")}
          </Link>
          <Link to="/history" className={`hover:underline ${darkMode ? "text-gray-300 hover:text-white" : "text-gray-600 hover:text-black"}`}>
            {getTranslation("history")}
          </Link>
          <Link to="/guide" className={`hover:underline ${darkMode ? "text-gray-300 hover:text-white" : "text-gray-600 hover:text-black"}`}>
            {getTranslation("guide")}
          </Link>
        </div>

        {/* Right Side */}
        <div className="flex items-center space-x-4">
          {/* Language Selector */}
          <div className="relative">
            <button onClick={() => setShowLanguageDropdown(!showLanguageDropdown)} className={`text-lg ${darkMode ? "text-gray-300" : "text-gray-700"}`}>
              üÖ∞Ô∏è
            </button>
            {showLanguageDropdown && (
              <div className={`absolute right-0 mt-2 w-96 z-50 rounded-md shadow-lg py-2 ${darkMode ? "bg-gray-700" : "bg-white"}`}>
                <div className="grid grid-cols-3 gap-1 p-2">
                  {languages.map((language) => (
                    <button
                      key={language.code}
                      onClick={() => handleLanguageChange(language)}
                      className={`flex items-center px-3 py-2 text-sm rounded ${currentLanguage === language.name
                        ? darkMode ? "bg-gray-600 text-white" : "bg-gray-100 text-gray-900"
                        : darkMode ? "text-gray-300 hover:bg-gray-600" : "text-gray-700 hover:bg-gray-100"
                        }`}
                    >
                      <span className="mr-2 text-lg">{language.flag}</span>
                      {language.name}
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Dark Mode Toggle */}
          <button onClick={toggleTheme} className={`text-lg ${darkMode ? "text-gray-300" : "text-gray-700"}`}>
            {darkMode ? "üåô" : "üåû"}
          </button>

          {/* Sign In / Sign Up (Desktop) */}
          <Link to="/signin" className={`hidden md:inline text-sm ${darkMode ? "text-gray-300" : "text-gray-600"}`}>
            {getTranslation("signIn")}
          </Link>
          <Link to="/signup" className="hidden md:inline">
            <button className="px-4 py-1.5 bg-green-600 hover:bg-green-700 text-white rounded">
              {getTranslation("signUp")}
            </button>
          </Link>

          {/* Hamburger Icon */}
          <button onClick={() => setMobileMenuOpen(!mobileMenuOpen)} className="md:hidden text-2xl">
            {mobileMenuOpen ? "‚úñ" : "‚ò∞"}
          </button>
        </div>
      </div>

      {/* Mobile Dropdown Menu */}
      {mobileMenuOpen && (
        <div className={`md:hidden px-4 pb-4 space-y-3 ${darkMode ? "bg-gray-800 text-white" : "bg-white text-gray-800"} border-t`}>
          <Link to="/help" onClick={() => setMobileMenuOpen(false)} className="block py-2 border-b">{getTranslation("help")}</Link>
          <Link to="/history" onClick={() => setMobileMenuOpen(false)} className="block py-2 border-b">{getTranslation("history")}</Link>
          <Link to="/guide" onClick={() => setMobileMenuOpen(false)} className="block py-2 border-b">{getTranslation("guide")}</Link>
          <Link to="/signin" onClick={() => setMobileMenuOpen(false)} className="block py-2 border-b">{getTranslation("signIn")}</Link>
          <Link to="/signup" onClick={() => setMobileMenuOpen(false)}>
            <button className="w-full mt-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded">{getTranslation("signUp")}</button>
          </Link>
        </div>
      )}
    </nav>
  );
}
